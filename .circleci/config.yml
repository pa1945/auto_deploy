---

#
# https://circleci.com/docs/2.0/contexts/
# https://circleci.com/orbs/registry/orb/circleci/aws-cli
# https://circleci.com/orbs/registry/orb/orbss/aws-cloudformation
#

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.2.1

jobs:
  aws-cli-example:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: circle-ci-uda
          # aws-access-key-id: AWS_ACCESS_KEY_ID2
          # aws-secret-access-key: AWS_SECRET_ACCESS_KEY2
          # aws-region: AWS_DEFAULT_REGION

      - run:
          name: Check aws cli version
          command: |
            aws --version
            echo $AWS_ACCESS_KEY_ID
            echo $AWS_SECRET_ACCESS_KEY
            echo $AWS_DEFAULT_REGION

      - run:
          name: Run aws cloudformation and create stack/s3-bucket
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            #
            echo "AWS keys:"
            echo $AWS_ACCESS_KEY_ID
            echo $AWS_SECRET_ACCESS_KEY
            echo $AWS_DEFAULT_REGION
            # aws cloudformation wait stack-create-complete \
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name project-udapeople --parameter-overrides \
            ID=s3-udapeople11

  hello-world-udapeople:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Say Hello to Udapeople
          command: |
            echo "Udapeople: Hello World"
      - run:
          name: Check aws cli version
          command: |
            aws --version


  lint-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: cd folder/dir frontend, ls -las
          command: |
            cd frontend && ls -als
      - run:
          name: List folder/dir where we are
          command: |
            ls -las
      - run:
          name: cd frontend, install 'npm i' and run lint
          command: |
            cd frontend; npm install ; npm run lint

  lint-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: cd folder/dir backend, ls -las
          command: |
            cd backend && ls -als
      - run:
          name: List folder/dir where we are
          command: |
            ls -las
      - run:
          name: cd backend, install 'npm i' and run lint
          command: |
            cd backend; npm install ; npm run lint

  run-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: cd folder/dir frontend, ls -las
          command: |
            cd frontend && ls -als
            npm -v && sudo npm install npm -g && npm -v

      - run:
          name: List folder/dir where we are
          command: |
            ls -las
      - run:
          name: cd frontend, install 'npm i'
          command: |
            cd frontend; npm install
      - run:
          name: cd frontend,  and run 'npm audit'
          command: |
            cd frontend; npm audit

      - run:
          name: cd frontend, and run 'npm start'
          command: |
            cd frontend; npm run start

  run-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: cd folder/dir backend, ls -las
          command: |
            cd backend && ls -als
            npm -v && sudo npm install npm -g && npm -v

      - run:
          name: List folder/dir where we are
          command: |
            ls -las
      - run:
          name: cd backend, install 'npm i'
          command: |
            cd backend; npm install
      - run:
          name: cd backend,  run 'npm audit'
          command: |
            cd backend; npm audit

      - run:
          name: cd backend, run 'npm start'
          command: |
            cd backend;  npm run start

  run-s3:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Check aws cli version
          command: |
            aws --version
      - run:
          name: Install/version aws cli
          command: |
            # sudo apt update
            # sudo apt upgrade
            # sudo apt install python3-pip
            # pip3 install awscli --upgrade --user
            aws --version

      - run:
          name: Run aws cloudformation and create stack/s3-bucket
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            #
            echo "AWS keys:"
            echo $AWS_ACCESS_KEY_ID
            echo $AWS_SECRET_ACCESS_KEY
            echo $AWS_DEFAULT_REGION
            # aws cloudformation wait stack-create-complete \
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-s3 \
            --parameter-overrides ID=s3-udapeople

  run-ec2:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install/version aws cli
          command: |
            # sudo apt update # Or without 'sudo'
            # sudo apt upgrade
            # sudo apt install python3-pip
            # pip3 install awscli --upgrade --user
            aws --version

      - run:
          name: Run aws cloudformation and create ec2 instance
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            # aws cloudformation wait stack-create-complete \
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-ec2 \
            --parameter-overrides ID=ec2-udapeople

  run-cloudfront:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install/version aws cli
          command: |
            # sudo apt update # Or without 'sudo'
            # sudo apt upgrade
            # sudo apt install python3-pip
            # pip3 install awscli --upgrade --user
            aws --version

      - run:
          # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-stack-export-name-error/
          # WorkflowID=<existing S3 bucket> e.g.:'s3-uda-deploy'
          name: Run aws cloudformation 
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            # aws cloudformation wait stack-create-complete \
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name cloudf-udapeople \
            --parameter-overrides WorkflowID=s3-uda-deploy


workflows:
  version: 2
  default:
    jobs:
      # - lint-frontend
      # - lint-backend
      # - run-frontend
      # - run-backend
      - run-s3:
          context: ci-uda-context
      #    aws-access-key-id: AWS_ACCESS_KEY_ID2
      #    aws-secret-access-key: AWS_SECRET_ACCESS_KEY2
      #    aws-region: AWS_DEFAULT_REGION
      - run-ec2:
          context: ci-uda-context
          requires:
            - run-s3
      - run-cloudfront:
          context: ci-uda-context
          # type: approval  # <<< This key-value pair will set your workflow to a status of "On Hold"
          requires:
            - run-s3
            - run-ec2
      # - hello-world-udapeople

  aws-cli:
    jobs:
      - hello-world-udapeople
      # - aws-cli-example:
      #    context: ci-uda-context
