---

#
# https://circleci.com/docs/2.0/contexts/
# https://circleci.com/orbs/registry/orb/circleci/aws-cli
# https://circleci.com/orbs/registry/orb/orbss/aws-cloudformation
#

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.2.1

jobs:
  aws-cli-example:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: circle-ci-uda
          # aws-access-key-id: AWS_ACCESS_KEY_ID2
          # aws-secret-access-key: AWS_SECRET_ACCESS_KEY2
          # aws-region: AWS_DEFAULT_REGION

      - run:
          name: Check aws cli version
          command: |
            aws --version
            echo $AWS_ACCESS_KEY_ID
            echo $AWS_SECRET_ACCESS_KEY
            echo $AWS_DEFAULT_REGION

      - run:
          name: Run aws cloudformation and create stack/s3-bucket
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            #
            echo "AWS keys:"
            echo $AWS_ACCESS_KEY_ID
            echo $AWS_SECRET_ACCESS_KEY
            echo $AWS_DEFAULT_REGION
            # aws cloudformation wait stack-create-complete \
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name project-udapeople --parameter-overrides \
            ID=s3-udapeople11

  hello-world-udapeople:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Say Hello to Udapeople
          command: |
            echo "Udapeople: Hello World"
      - run:
          name: Check aws cli version
          command: |
            aws --version


  lint-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: cd folder/dir frontend, ls -las
          command: |
            cd frontend && ls -als
      - run:
          name: List folder/dir where we are
          command: |
            pwd ; ls -las
      - run:
          name: cd frontend, install 'npm i' and run lint
          command: |
            cd frontend; npm install ; npm run lint

  lint-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: cd folder/dir backend, ls -las
          command: |
            cd backend && ls -als
      - run:
          name: List folder/dir where we are
          command: |
            pwd ; ls -las
      - run:
          name: cd backend, install 'npm i' and run lint
          command: |
            cd backend; npm install ; npm run lint

  run-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: cd folder/dir frontend, ls -las
          command: |
            cd frontend && ls -als
            npm -v && sudo npm install npm -g && npm -v

      - run:
          name: List folder/dir where we are
          command: |
            pwd ; ls -las
      - run:
          name: cd frontend, install 'npm i'
          command: |
            cd frontend; npm install
      - run:
          name: cd frontend,  and run 'npm audit'
          command: |
            cd frontend; npm audit
      - run:
          name: cd frontend, and run 'npm start'
          command: |
            cd frontend; npm run start

  run-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: cd folder/dir backend, ls -las
          command: |
            cd backend && ls -als
            npm -v && sudo npm install npm -g && npm -v
      - run:
          name: List folder/dir where we are
          command: |
            pwd ; ls -las
      - run:
          name: cd backend, install 'npm i'
          command: |
            cd backend; npm install
      - run:
          name: cd backend,  run 'npm audit'
          command: |
            cd backend; npm audit

      - run:
          name: cd backend, run 'npm start'
          command: |
            cd backend;  npm run start

  create-frontend-s3:
    parameters:
      stack-param:
        type: string
        default: stack-name-udap
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Check aws cli version
          command: |
            aws --version
      - run:
          name: Install/version aws cli
          command: |
            # sudo apt update
            # sudo apt upgrade
            # sudo apt install python3-pip
            # pip3 install awscli --upgrade --user
            aws --version

      - run:
          name: Run aws cloudformation and create stack/s3-bucket
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            #
            echo "AWS keys:"
            echo $AWS_ACCESS_KEY_ID
            echo $AWS_SECRET_ACCESS_KEY
            echo $AWS_DEFAULT_REGION
            # aws cloudformation wait stack-create-complete \
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-s3 \
            --parameter-overrides ID=<< parameters.stack-param >>
            # --parameter-overrides ID=s3-udapeople

  create-backend-ec2:
    parameters:
      stack-param:
        type: string
        default: stack-name-udap
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install/version aws cli
          command: |
            # sudo apt update # Or without 'sudo'
            # sudo apt upgrade
            # sudo apt install python3-pip
            # pip3 install awscli --upgrade --user
            aws --version

      - run:
          name: Run aws cloudformation and create ec2 instance
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            # aws cloudformation wait stack-create-complete \
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-ec2 \
            --parameter-overrides ID=<< parameters.stack-param >>
            # --parameter-overrides ID=ec2-udapeople

  create-prometheus-ec2:
    parameters:
      stack-param:
        type: string
        default: stack-name-udap
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install/version aws cli
          command: |
            # sudo apt update # Or without 'sudo'
            # sudo apt upgrade
            # sudo apt install python3-pip
            # pip3 install awscli --upgrade --user
            aws --version
      - run:
          name: Run aws cloudformation and create ec2 instance
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            # aws cloudformation wait stack-create-complete \
            aws cloudformation deploy \
            --template-file .circleci/files/prometheus.yml \
            --stack-name prometheus-ec2 \
            --parameter-overrides ID=<< parameters.stack-param >>
            # --parameter-overrides ID=ec2-promet

  run-cloudfront:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install/version aws cli
          command: |
            # sudo apt update # Or without 'sudo'
            # sudo apt upgrade
            # sudo apt install python3-pip
            # pip3 install awscli --upgrade --user
            aws --version
      - run:
          # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-stack-export-name-error/
          # WorkflowID=<existing S3 bucket> e.g.:'s3-uda-deploy'
          name: Run aws cloudformation 
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            # aws cloudformation wait stack-create-complete \
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name cloudf-udapeople \
            --parameter-overrides WorkflowID=s3-uda-deploy
            # 'WorkflowID=s3-uda-deploy' same name created S3 bucket above

  stack-delete:
    parameters:
      stack-param:
        type: string
        default: stack-name-udap
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: Install/version aws cli
          command: |
            aws --version
      - run:
          # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-stack-export-name-error/
          # WorkflowID=<existing S3 bucket> e.g.:'s3-uda-deploy'
          name: Delete stack
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2            
            aws cloudformation delete-stack \
            --stack-name  << parameters.stack-param >>
            #
            # Store evidence on 'memstash.io'
            # echo "This is pipeline ID << pipeline.id >>"
            # echo "Stored pipeline ID: << pipeline.id >>_stack-delete"
            DATE=`date`
            curl -H "Content-Type: text/plain" \
              -H "token: 265a0727-db66-453a-8559-6b292b496502" \
              --request PUT --data "Circle - $DATE : << pipeline.id >>_stack-delete" \
              https://api.memstash.io/values/udapeople-stack-delete
            # curl -H "token: 265a0727-db66-453a-8559-6b292b496502" \
            #  --request GET https://api.memstash.io/values/udapeople-stack-delete

  s3-delete:
    parameters:
      stack-param:
        type: string
        default: bucket-namex
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: Delete s3 bucket
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            aws s3 rb s3://<< parameters.stack-param >>
            # Deletes all objects and subfolders in the bucket and 
            # then removes the bucket.
            # aws s3 rb s3://<< parameters.stack-param >> --force

  ec2-delete:
    parameters:
      stack-param:
        type: string
        default: i-5203422c    # Fake
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: Delete ec2 instance
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            aws ec2 terminate-instances \
            --instance-ids  << parameters.stack-param >>

  run-cp2s3:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Copy fronted/dist to s3 bucket
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            aws --version
            #
            # $ aws s3 cp ./dist s3://s3-uda-deploy --recursive \
            # --exclude "*.DS_Store" --acl public-read --cache-control \
            # public,max-age=604800 --dryrun --profile iam_user
            #
            # Or, use ansible:
            # if [ "${CIRCLE_BRANCH}" == "master" ]; then
            #   ansible-playbook playb_cp2backend.yml
            # fi
            # Store evidence on 'memstash.io'
            # echo "This is pipeline ID << pipeline.id >>"
            # echo "Stored pipeline ID: << pipeline.id >>_cp2s3"
            DATE=`date`
            curl -H "Content-Type: text/plain" \
              -H "token: 265a0727-db66-453a-8559-6b292b496502" \
              --request PUT --data "Circle - $DATE: << pipeline.id >>_cp2s3" \
              https://api.memstash.io/values/udapeople-cp2s3
            # curl -H "token: 265a0727-db66-453a-8559-6b292b496502" \
            #  --request GET https://api.memstash.io/values/udapeople-cp2s3
            

  check-curl-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Check backend using curl
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID2
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY2
            BACKEND_IP=$(aws ec2 describe-instances  \
              --filters Name=tag-key,Values=Name  \
              --query 'Reservations[*].Instances[*].{IP:PublicIpAddress,Name:Tags[?Key==`Name`]|[0].Value}' \
              --output text|grep backend|awk '{print $1}' )
            if curl -s  "http://${BACKEND_IP}:3030/api/status" | grep -i "status"
            then
              exit 0   # OK
            else
              exit 1   # Fail
            fi

  check-curl-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Check Frontend using curl
          command: |
            FRONTEND="http://s3-uda-deploy.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${FRONTEND} | grep -i "Welcome"
            then
              exit 0    # OK
            else
              exit 1    # Fail
            fi

  deploy-ifmaster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy if Master branch
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # ansible-playbook site.yml
              echo "Master Branch - deploy site"
              exit 0
            else
              echo "Branch = ${CIRCLE_BRANCH}: NOT Master Branch -- Do not deploy site"
              exit 1
            fi

workflows:
  version: 2

  clean-up-old-stacks:
    jobs:
      - stack-delete:
          context: ci-uda-context
          stack-param: stack-name-udap
      - s3-delete:
          context: ci-uda-context
          stack-param: udapeople-uda-bucketx
          #requires:
          #  create-frontend-s3
      - ec2-delete:
          context: ci-uda-context
          stack-param: i-04ea18fd6a4a5379f
          #requires:
          #  - create-backend-ec2

  create-infra:
    jobs:
      - create-frontend-s3:
          context: ci-uda-context
          stack-param: uda-bucketx
      - create-backend-ec2:
          context: ci-uda-context
          stack-param: uda-instancex
          requires:
            - create-frontend-s3
      - create-prometheus-ec2:
          context: ci-uda-context
          stack-param: udap-prometx
          #requires:
          #  - create-frontend-s3
          #  - create-backend-ec2

#  check-code:
#    jobs:
#-      # - lint-frontend
#-      # - lint-backend
#-      # - run-frontend
#-      # - run-backend
      - run-cp2s3:
          context: ci-uda-context
          requires:
            - create-frontend-s3
            - create-backend-ec2
            - deploy-ifmaster

#-      - run-cloudfront:
#-          context: ci-uda-context
#-          # type: approval  # <<< This key-value pair will set your 
#-          # workflow to a status of "On Hold"
#-          requires:
#-            - create-frontend-s3
#-            - create-backend-ec2
#-            - create-prometheus-ec2
#-      - check-curl-backend:
#-          context: ci-uda-context
#-          requires:
#-            - create-backend-ec2
#-      - check-curl-frontend:
#-          context: ci-uda-context
#-          requires:
#-            - check-curl-backend
#-

#  deploy-udap:
#    jobs:

      - deploy-ifmaster:
        filters:
          branches:
            - master
            - beta

#        filters:
#          branches:
#            only:
#              - master
#              - beta

  say-hello:
    jobs:
      - hello-world-udapeople
      # - aws-cli-example:
      #    context: ci-uda-context
